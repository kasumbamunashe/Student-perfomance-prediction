{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3e15d2d0-62a8-45e6-aa87-6bfc69bae970",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The predicted status for the new student is: Pass\n",
      "The overall performance status for the new student is: Needs Improvement\n",
      "Weak areas for the new student: [('average_test_mark', 1.5), ('average_assignment_mark', 1.2), ('average_exercise_mark', 1.0)]\n",
      "Suggestions for improvement: ['Review test materials regularly, take practice tests, and focus on areas where marks were low.', 'Ensure timely completion of assignments, seek feedback from teachers, and improve writing and research skills.', 'Participate in regular exercise, join study groups, and engage in discussions to better understand the material.']\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Load the dataset\n",
    "df = pd.read_csv('student_performance_with_grades.csv')\n",
    "\n",
    "# Drop the unnecessary column\n",
    "df.drop(columns=['Unnamed: 5'], inplace=True)\n",
    "\n",
    "# Prepare features and target variable\n",
    "X = df[['average_study_hours', 'average_test_mark', 'average_assignment_mark', 'average_exercise_mark']]\n",
    "y = df['Status']\n",
    "\n",
    "# Encode the target variable\n",
    "y_encoded = y.map({'Pass': 1, 'Fail': 0})\n",
    "\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and train the model\n",
    "model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Define the suggestions and thresholds\n",
    "suggestions = {\n",
    "    'average_study_hours': \"Encourage consistent study habits and allocate specific time slots each day for studying.\",\n",
    "    'average_test_mark': \"Review test materials regularly, take practice tests, and focus on areas where marks were low.\",\n",
    "    'average_assignment_mark': \"Ensure timely completion of assignments, seek feedback from teachers, and improve writing and research skills.\",\n",
    "    'average_exercise_mark': \"Participate in regular exercise, join study groups, and engage in discussions to better understand the material.\"\n",
    "}\n",
    "\n",
    "threshold_percentile = 0.25\n",
    "thresholds = df[['average_study_hours', 'average_test_mark', 'average_assignment_mark', 'average_exercise_mark']].quantile(threshold_percentile)\n",
    "\n",
    "# Weights for each feature\n",
    "weights = {\n",
    "    'average_study_hours': 1.5,\n",
    "    'average_test_mark': 1.5,\n",
    "    'average_assignment_mark': 1.2,\n",
    "    'average_exercise_mark': 1.0\n",
    "}\n",
    "\n",
    "# Function to identify weak areas with weighting\n",
    "def identify_weak_areas(row, thresholds, weights):\n",
    "    weak_areas = []\n",
    "    for feature in thresholds.index:\n",
    "        if row[feature] < thresholds[feature]:\n",
    "            weak_areas.append((feature, weights[feature]))\n",
    "    return sorted(weak_areas, key=lambda x: x[1], reverse=True)  # Sort by weight\n",
    "\n",
    "# Function to determine status based on weak areas\n",
    "def determine_status(weak_areas):\n",
    "    num_weak_areas = len(weak_areas)\n",
    "    if num_weak_areas == 0:\n",
    "        return \"High Achiever\"\n",
    "    elif num_weak_areas <= 2:\n",
    "        return \"Proficient\"\n",
    "    elif num_weak_areas <= 4:\n",
    "        return \"Needs Improvement\"\n",
    "    else:\n",
    "        return \"Struggling\"\n",
    "\n",
    "# Function to predict status and provide suggestions\n",
    "def evaluate_student_performance(new_student_marks):\n",
    "    # Convert new student data to DataFrame\n",
    "    new_student_df = pd.DataFrame([new_student_marks])\n",
    "    \n",
    "    # Predict the status\n",
    "    predicted_status = model.predict(new_student_df)\n",
    "    predicted_status_label = 'Pass' if predicted_status[0] == 1 else 'Fail'\n",
    "    \n",
    "    # Identify weak areas\n",
    "    new_student_df['weak_areas'] = new_student_df.apply(lambda row: identify_weak_areas(row, thresholds, weights), axis=1)\n",
    "    \n",
    "    # Determine the status based on weak areas\n",
    "    new_student_df['status'] = new_student_df['weak_areas'].apply(determine_status)\n",
    "    \n",
    "    # Provide suggestions based on weak areas\n",
    "    new_student_df['suggestions'] = new_student_df['weak_areas'].apply(lambda areas: [suggestions[area[0]] for area in areas])\n",
    "    \n",
    "    # Extract results\n",
    "    weak_areas = new_student_df['weak_areas'].values[0]\n",
    "    suggestions_list = new_student_df['suggestions'].values[0]\n",
    "    status = new_student_df['status'].values[0]\n",
    "    \n",
    "    return {\n",
    "        'predicted_status': predicted_status_label,\n",
    "        'status': status,\n",
    "        'weak_areas': weak_areas,\n",
    "        'suggestions': suggestions_list\n",
    "    }\n",
    "\n",
    "# Example usage\n",
    "new_student_marks = {\n",
    "    'average_study_hours': 14.0,\n",
    "    'average_test_mark': 55.0,\n",
    "    'average_assignment_mark': 68.0,\n",
    "    'average_exercise_mark': 74.0\n",
    "}\n",
    "\n",
    "result = evaluate_student_performance(new_student_marks)\n",
    "print(f\"The predicted status for the new student is: {result['predicted_status']}\")\n",
    "print(f\"The overall performance status for the new student is: {result['status']}\")\n",
    "print(f\"Weak areas for the new student: {result['weak_areas']}\")\n",
    "print(f\"Suggestions for improvement: {result['suggestions']}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d12faa21-e235-4011-b1ee-fd9a9284e2b1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
